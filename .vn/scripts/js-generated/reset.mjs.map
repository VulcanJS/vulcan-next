{"version":3,"sources":["../ts-sources/db/reset.ts","../../../src/lib/debuggers.ts","../../../src/lib/api/mongoose/connection.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nimport {\n  closeDbConnection,\n  connectToAppDb,\n} from \"~/lib/api/mongoose/connection\";\n\nasync function run() {\n  await connectToAppDb();\n  await mongoose.connection.db.dropDatabase();\n  await closeDbConnection();\n}\nrun();\n","import debug from \"debug\";\nexport const debugMongo = debug(\"vn:mongo\");\nexport const debugAccount = debug(\"vn:account\");\n","import { debugMongo } from \"~/lib/debuggers\";\nimport mongoose, { ConnectOptions } from \"mongoose\";\n\n// Based on https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/util/mongodb.js\n// We need to globally cache Mongoose connection promise so that it's reused by all calls to connectToDb\n// => this avoid unexpectedly creating multiple connections + the promise is shared so .then/.catch are called as expected\ninterface MongooseCache {\n  connectPromise: Promise<any> | null;\n}\ninterface GlobalWithMongoose extends NodeJS.Global {\n  mongooseCache: MongooseCache | undefined;\n}\nconst globalNode: GlobalWithMongoose = {\n  mongooseCache: undefined,\n  ...global,\n};\nlet mongooseCache = globalNode.mongooseCache; // shared promise, so \"then\" chains are called correctly for all code trying to connect (avoids race conditions)\nif (!mongooseCache) {\n  globalNode.mongooseCache = { connectPromise: null };\n  mongooseCache = globalNode.mongooseCache;\n}\n\n/**\n * Connect to any mongo database\n *\n * NOTE: do not use directly, prefer using \"connectToMainDb\"\n * @param mongoUri\n * @param options\n */\nexport const connectToDb = async (\n  mongoUri: string,\n  options?: ConnectOptions\n) => {\n  if (mongooseCache?.connectPromise) {\n    debugMongo(\n      \"Running connectToDb, already connected or connecting to Mongo, waiting for promise\"\n    );\n\n    await mongooseCache.connectPromise;\n  }\n  if (![1, 2].includes(mongoose.connection.readyState)) {\n    debugMongo(\"Call mongoose connect\");\n    (mongooseCache as MongooseCache).connectPromise = mongoose.connect(\n      mongoUri,\n      {\n        ...(options || {}),\n      }\n    );\n    // Wait for connection\n    await mongooseCache?.connectPromise;\n  }\n};\n\n/**\n * Connect to the application main database\n *\n * Mongo URI is provided throught the MONGO_URI environment variable\n */\nexport const connectToAppDb = async () => {\n  const mongoUri = process.env.MONGO_URI;\n  if (!mongoUri) throw new Error(\"MONGO_URI env variable is not defined\");\n  const isLocalMongo = mongoUri.match(/localhost/);\n  try {\n    await connectToDb(mongoUri, {\n      // fail the seed early during development\n      serverSelectionTimeoutMS: isLocalMongo ? 3000 : undefined,\n    });\n  } catch (err) {\n    console.error(`\\nCould not connect to Mongo database on URI ${mongoUri}.`);\n    if (isLocalMongo) {\n      console.error(\"Did you forget to run 'yarn run start:mongo'?\\n\");\n    }\n    console.error(err);\n    // rethrow\n    throw err;\n  }\n};\n\nexport async function closeDbConnection() {\n  try {\n    await mongoose.connection.close();\n  } catch (err) {\n    // Catch locally error\n    console.error(\"Could not close mongoose connection\");\n    console.error(err);\n    throw err;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AACO,IAAM,aAAa,MAAM,UAAU;AACnC,IAAM,eAAe,MAAM,YAAY;;;ACD9C;AAWA,IAAM,aAAiC;AAAA,EACrC,eAAe;AAAA,GACZ;AAEL,IAAI,gBAAgB,WAAW;AAC/B,IAAI,CAAC,eAAe;AAClB,aAAW,gBAAgB,EAAE,gBAAgB,KAAK;AAClD,kBAAgB,WAAW;AAC7B;AASO,IAAM,cAAc,OACzB,UACA,YACG;AACH,MAAI,+CAAe,gBAAgB;AACjC,eACE,oFACF;AAEA,UAAM,cAAc;AAAA,EACtB;AACA,MAAI,CAAC,CAAC,GAAG,CAAC,EAAE,SAAS,SAAS,WAAW,UAAU,GAAG;AACpD,eAAW,uBAAuB;AAClC,IAAC,cAAgC,iBAAiB,SAAS,QACzD,UACA,mBACM,WAAW,CAAC,EAEpB;AAEA,UAAM,gDAAe;AAAA,EACvB;AACF;AAOO,IAAM,iBAAiB,YAAY;AACxC,QAAM,WAAW,QAAQ,IAAI;AAC7B,MAAI,CAAC;AAAU,UAAM,IAAI,MAAM,uCAAuC;AACtE,QAAM,eAAe,SAAS,MAAM,WAAW;AAC/C,MAAI;AACF,UAAM,YAAY,UAAU;AAAA,MAE1B,0BAA0B,eAAe,MAAO;AAAA,IAClD,CAAC;AAAA,EACH,SAAS,KAAP;AACA,YAAQ,MAAM;AAAA,6CAAgD,WAAW;AACzE,QAAI,cAAc;AAChB,cAAQ,MAAM,iDAAiD;AAAA,IACjE;AACA,YAAQ,MAAM,GAAG;AAEjB,UAAM;AAAA,EACR;AACF;AAEA,mCAA0C;AACxC,MAAI;AACF,UAAM,SAAS,WAAW,MAAM;AAAA,EAClC,SAAS,KAAP;AAEA,YAAQ,MAAM,qCAAqC;AACnD,YAAQ,MAAM,GAAG;AACjB,UAAM;AAAA,EACR;AACF;;;AFjFA,qBAAqB;AACnB,QAAM,eAAe;AACrB,QAAM,UAAS,WAAW,GAAG,aAAa;AAC1C,QAAM,kBAAkB;AAC1B;AACA,IAAI;","names":[]}