{"version":3,"sources":["../../../src/lib/debuggers.ts","../../../src/lib/api/mongoose/connection.ts","../../../src/lib/api/runSeed.ts","../../../src/lib/api/seed.ts","../../../src/models/user.server.ts","../../../src/models/user.ts","../../../src/lib/api/account/accountManagement.ts","../../../src/lib/api/mail/transports.ts","../../../src/lib/api/account/emails/resetPasswordToken.tsx","../../../src/lib/api/account/emails/verifyEmail.tsx","../../../src/lib/api/account/emails/resetPasswordSuccess.tsx","../../../src/lib/api/account/emails/changePasswordSuccess.tsx","../../../src/lib/api/account/auth-cookies.ts","../../../src/lib/api/account/passport/password-local.ts","../../../src/lib/api/account/session.ts","../../../src/lib/api/account/utils.ts","../../../src/lib/api/context.ts","../../../src/models/sampleModel.server.ts","../../../src/models/sampleModel.ts","../../../src/models/index.server.ts","../ts-sources/db/seed.ts"],"sourcesContent":["import debug from \"debug\";\nexport const debugMongo = debug(\"vn:mongo\");\nexport const debugAccount = debug(\"vn:account\");\n","import { debugMongo } from \"~/lib/debuggers\";\nimport mongoose, { ConnectOptions } from \"mongoose\";\n\n// Based on https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/util/mongodb.js\n// We need to globally cache Mongoose connection promise so that it's reused by all calls to connectToDb\n// => this avoid unexpectedly creating multiple connections + the promise is shared so .then/.catch are called as expected\ninterface MongooseCache {\n  connectPromise: Promise<any> | null;\n}\ninterface GlobalWithMongoose extends NodeJS.Global {\n  mongooseCache: MongooseCache | undefined;\n}\nconst globalNode: GlobalWithMongoose = {\n  mongooseCache: undefined,\n  ...global,\n};\nlet mongooseCache = globalNode.mongooseCache; // shared promise, so \"then\" chains are called correctly for all code trying to connect (avoids race conditions)\nif (!mongooseCache) {\n  globalNode.mongooseCache = { connectPromise: null };\n  mongooseCache = globalNode.mongooseCache;\n}\n\n/**\n * Connect to any mongo database\n *\n * NOTE: do not use directly, prefer using \"connectToMainDb\"\n * @param mongoUri\n * @param options\n */\nexport const connectToDb = async (\n  mongoUri: string,\n  options?: ConnectOptions\n) => {\n  if (mongooseCache?.connectPromise) {\n    debugMongo(\n      \"Running connectToDb, already connected or connecting to Mongo, waiting for promise\"\n    );\n\n    await mongooseCache.connectPromise;\n  }\n  if (![1, 2].includes(mongoose.connection.readyState)) {\n    debugMongo(\"Call mongoose connect\");\n    (mongooseCache as MongooseCache).connectPromise = mongoose.connect(\n      mongoUri,\n      {\n        ...(options || {}),\n      }\n    );\n    // Wait for connection\n    await mongooseCache?.connectPromise;\n  }\n};\n\n/**\n * Connect to the application main database\n *\n * Mongo URI is provided throught the MONGO_URI environment variable\n */\nexport const connectToAppDb = async () => {\n  const mongoUri = process.env.MONGO_URI;\n  if (!mongoUri) throw new Error(\"MONGO_URI env variable is not defined\");\n  const isLocalMongo = mongoUri.match(/localhost/);\n  try {\n    await connectToDb(mongoUri, {\n      // fail the seed early during development\n      serverSelectionTimeoutMS: isLocalMongo ? 3000 : undefined,\n    });\n  } catch (err) {\n    console.error(`\\nCould not connect to Mongo database on URI ${mongoUri}.`);\n    if (isLocalMongo) {\n      console.error(\"Did you forget to run 'yarn run start:mongo'?\\n\");\n    }\n    console.error(err);\n    // rethrow\n    throw err;\n  }\n};\n\nexport async function closeDbConnection() {\n  try {\n    await mongoose.connection.close();\n  } catch (err) {\n    // Catch locally error\n    console.error(\"Could not close mongoose connection\");\n    console.error(err);\n    throw err;\n  }\n}\n","import mongoose from \"mongoose\";\nimport { debugMongo } from \"~/lib/debuggers\";\nimport { connectToAppDb } from \"~/lib/api/mongoose/connection\";\nimport seedDatabase from \"~/lib/api/seed\";\nimport { createContextBase } from \"~/lib/api/context\";\n\nasync function runSeed() {\n  // Seed in development\n  // In production, we expect you to seed the database manually\n  if (process.env.NODE_ENV !== \"production\") {\n    try {\n      await connectToAppDb();\n      debugMongo(\"Connected to db, seeding admin and restaurants\");\n      // TODO: what is the best pattern to seed in a serverless context?\n      // We pass the default graphql context to the seed function,\n      // so it can access our models\n      const contextBase = await createContextBase();\n      await seedDatabase(contextBase);\n      // also seed restaurant manually to demo a custom server\n      const seedRestaurants = async () => {\n        const db = mongoose.connection;\n        const count = await db.collection(\"restaurants\").countDocuments();\n        if (count === 0) {\n          await db.collection(\"restaurants\").insertMany([\n            {\n              name: \"The Restaurant at the End of the Universe\",\n            },\n            { name: \"The Last Supper\" },\n            { name: \"Shoney's\" },\n            { name: \"Big Bang Burger\" },\n            { name: \"Fancy Eats\" },\n          ]);\n        }\n      };\n      await seedRestaurants();\n    } catch (err) {\n      console.error(\n        `\\nCould not connect to Mongo database on URI during seed step.`\n      );\n      console.error(err);\n      process.exit(1);\n    }\n  }\n}\n\nexport default runSeed;\n","import { createMutator, getModelConnector } from \"@vulcanjs/graphql/server\";\nimport { User } from \"~/models/user.server\";\n\nconst seed = async (context) => {\n  if (process.env.MONGO_URI?.match(/lbke-demo/)) {\n    console.log(\"Using demo database, skip seeding\");\n    return;\n  }\n  // Add your seed functions here based on the example of users\n  const UserConnector = getModelConnector(context, User);\n\n  const seedAdminUser = async () => {\n    // FIXME: the isAdmin: true filter seems ignored for unknown version\n    const count = await UserConnector.count({ isAdmin: true });\n    if (count === 0) {\n      console.log(\"No admin user found, seeding admin\");\n      if (!process.env.ADMIN_EMAIL) {\n        throw new Error(\n          \"ADMIN_EMAIL env variable not defined. Could not seed admin user\"\n        );\n      }\n      if (!process.env.ADMIN_INITIAL_PASSWORD) {\n        throw new Error(\n          \"ADMIN_INITIAL_PASSWORD env variable not defined. Could not seed admin user.\"\n        );\n      }\n      const admin = {\n        email: process.env.ADMIN_EMAIL,\n        password: process.env.ADMIN_INITIAL_PASSWORD,\n        isAdmin: true,\n      };\n      try {\n        await createMutator({\n          model: User,\n          data: admin,\n          context,\n          asAdmin: true,\n          validate: false,\n        });\n      } catch (error) {\n        console.error(\"Could not seed admin user\", error);\n      }\n    } else {\n      console.log(`Found ${count} Admin(s) in the database, no need to seed.`);\n    }\n  };\n\n  // Run the seed functions\n  await seedAdminUser();\n};\n\nexport default seed;\n","/**\n * Extends user.ts with server-side logic\n */\nimport merge from \"lodash/merge.js\";\n\nimport {\n  CreateGraphqlModelOptionsServer,\n  createGraphqlModelServer,\n  mergeModelDefinitionServer,\n  VulcanGraphqlSchemaServer,\n} from \"@vulcanjs/graphql/server\";\nimport { createMongooseConnector } from \"@vulcanjs/mongo\";\n\nimport {\n  schema as clientSchema,\n  modelDef as clientModelDef,\n  UserType as UserTypeShared,\n} from \"./user\";\nimport { hashPassword } from \"~/lib/api/account\";\nimport mongoose from \"mongoose\";\n\n// use if you specifically want to accept only server user definition\nexport interface UserTypeServer extends UserTypeShared {\n  hash?: string;\n  salt?: string;\n}\nexport type UserType = UserTypeServer; // reexport for isomorphic naming\n\n/**\n * Add userId to a document\n * @param data\n */\nconst guaranteeOwnership = (data) => {\n  // TODO: put _id into userId to guarantee ownership\n  data.userId = data._id;\n  return data;\n};\n\n/**\n * Store hash and salt, and remove temporary password from form document\n * @param data\n * @param props\n * @returns\n */\nconst handlePasswordCreation = (data, props) => {\n  const { password } = data;\n  // const user = await DB.findUser(...)\n  const { hash, salt } = hashPassword(password);\n  data.hash = hash;\n  data.salt = salt;\n  // Do not store the password in the database\n  data.password = null;\n  return data;\n};\n\nconst handlePasswordUpdate = (data) => {\n  const { password } = data;\n  // update the hash\n  if (password) {\n    // const user = await DB.findUser(...)\n    const { hash, salt } = hashPassword(data.password);\n    data.hash = hash;\n    data.salt = salt;\n    // Do not store the password in the database\n    data.password = null;\n  }\n  return data;\n};\n\nconst passwordAuthSchema: VulcanGraphqlSchemaServer = {\n  // password auth management\n  hash: {\n    type: String,\n    canRead: [],\n    canCreate: [],\n    canUpdate: [],\n  },\n  salt: {\n    type: String,\n    canRead: [],\n    canCreate: [],\n    canUpdate: [],\n  },\n  // Example of a custom field resolver to get data from other API\n  /*\n  twitterId: {\n    type: String,\n    canRead:Â [\"admins\", \"owners\"],\n    canCreate: [\"admins\"],\n    canUpdate: [\"admins\"],\n    resolveAs: {\n      type: \"JSON\",\n      resolver:(root, args, context) => {\n        return {twiterHandle: \"@VulcanJS\"}\n      }\n    }\n  }\n   */\n};\n\n//import { nanoid } from 'nanoid'\nconst schema: VulcanGraphqlSchemaServer = merge({}, clientSchema, {\n  ...passwordAuthSchema,\n  /**\n   * UNCOMMENT ONLY WHEN REUSING USE FROM A VULCAN METEOR DATABASE\n  _id: {\n    onCreate: () => {\n      // generate a random value for the id\n      return nanoid();\n    },\n  },\n  */\n});\n\nconst modelDef: CreateGraphqlModelOptionsServer = mergeModelDefinitionServer(\n  clientModelDef,\n  {\n    graphql: {\n      // server only fields\n      callbacks: {\n        create: {\n          before: [handlePasswordCreation],\n          after: [guaranteeOwnership],\n        },\n        update: {\n          before: [handlePasswordUpdate],\n        },\n      },\n    },\n    schema,\n  }\n);\n\nexport const User = createGraphqlModelServer(modelDef);\nexport const UserConnector = createMongooseConnector<UserTypeServer>(\n  User\n  /*\n  UNCOMMENT ONLY WHEN REUSING A MONGO DATABASE WITH STRING IDS\n  Will force _id to be a string\n  /!\\ You should not mix string _id and ObjectId _id!\n  /!\\ You should not use this for a new Vulcan Next project!\n  , {\n  mongooseSchema: new mongoose.Schema({ _id: String }, { strict: false }), // we also need an on create callback\n}\n*/\n);\nUser.graphql.connector = UserConnector;\n","import { VulcanDocument } from \"@vulcanjs/schema\";\nimport SimpleSchema from \"simpl-schema\";\nimport {\n  createGraphqlModel,\n  CreateGraphqlModelOptionsShared,\n  VulcanGraphqlSchema,\n} from \"@vulcanjs/graphql\";\n\nexport interface UserType extends VulcanDocument {\n  email: string;\n  isAdmin?: boolean;\n  groups: Array<string>;\n\n  isVerified?: boolean;\n}\n\nconst passwordAuthSchema: VulcanGraphqlSchema = {\n  // Temporary field, used only in the frontend, must be deleted on mutations\n  password: {\n    type: String,\n    optional: false,\n    canRead: [],\n    canCreate: [\"guests\"],\n    canUpdate: [\"owners\"],\n  },\n};\n\nconst emailVerificationSchema: VulcanGraphqlSchema = {\n  isVerified: {\n    type: String,\n    default: false,\n    optional: true,\n    // can be forced by admins/mods\n    canRead: [\"owners\"],\n    canCreate: [\"admins\"],\n    canUpdate: [\"admins\"],\n  },\n};\n\nexport const schema: VulcanGraphqlSchema = {\n  // _id, userId, and createdAT are basic field you may want to use in almost all schemas\n  _id: {\n    type: String,\n    optional: true,\n    canRead: [\"guests\"],\n  },\n  // userId is the _id of the owner of the document\n  // Here, it guarantees that the user belongs to group \"owners\" for his own data\n  userId: {\n    type: String,\n    optional: true,\n    canRead: [\"guests\"],\n  },\n  createdAt: {\n    type: Date,\n    optional: true,\n    canRead: [\"admins\"],\n    onCreate: () => {\n      return new Date();\n    },\n  },\n  username: {\n    type: String,\n    optional: true,\n    canRead: [\"guests\"],\n    canUpdate: [\"admins\"],\n    canCreate: [\"owners\"],\n    searchable: true,\n  },\n  isAdmin: {\n    type: Boolean,\n    label: \"Admin\",\n    input: \"checkbox\",\n    optional: true,\n    canCreate: [\"admins\"],\n    canUpdate: [\"admins\"],\n    canRead: [\"guests\"],\n  },\n\n  email: {\n    type: String,\n    optional: false,\n    regEx: SimpleSchema.RegEx.Email,\n    // mustComplete: true,\n    input: \"text\",\n    canCreate: [\"members\"],\n    canUpdate: [\"owners\", \"admins\"],\n    canRead: [\"owners\", \"admins\"],\n    searchable: true,\n    unique: true,\n    // unique: true // note: find a way to fix duplicate accounts before enabling this\n  },\n  groups: {\n    type: Array,\n    optional: true,\n    input: \"checkboxgroup\",\n    canCreate: [\"admins\"],\n    canUpdate: [\"admins\"],\n    canRead: [\"guests\"],\n    // TODO: allow to manage custom groups\n    // form: {\n    //   options: function () {\n    //     const groups = _.without(\n    //       _.keys(getCollection(\"Users\").groups),\n    //       \"guests\",\n    //       \"members\",\n    //       \"owners\",\n    //       \"admins\"\n    //     );\n    //     return groups.map((group) => {\n    //       return { value: group, label: group };\n    //     });\n    //   },\n    // },\n  },\n  \"groups.$\": {\n    type: String,\n    optional: true,\n  },\n\n  ...passwordAuthSchema,\n  ...emailVerificationSchema,\n};\n\nexport const modelDef: CreateGraphqlModelOptionsShared = {\n  name: \"VulcanUser\",\n  graphql: {\n    typeName: \"VulcanUser\",\n    multiTypeName: \"VulcanUsers\",\n  },\n  schema,\n  permissions: {\n    canCreate: [\"guests\"], // signup is enabled\n    canUpdate: [\"owners\", \"admins\"],\n    canDelete: [\"owners\", \"admins\"],\n    canRead: [\"members\", \"admins\"],\n  },\n};\nexport const User = createGraphqlModel(modelDef);\n","/**\n * Helpers for email/password based authentication and account management\n *\n * /!\\ Those methods expects the connection with the database to be already established\n * - Either create a UserConnector that guarantees that the connection is always established\n * - Or establish the connection before you run those function, using \"connectoToAppDb()\" helper\n */\nimport crypto from \"crypto\";\nimport { UserTypeServer, UserConnector } from \"~/models/user.server\";\nimport { localMailTransport } from \"~/lib/api/mail/transports\";\nimport { resetPasswordTokenEmailParameters } from \"./emails/resetPasswordToken\";\nimport { verifyEmailEmailParameters } from \"./emails/verifyEmail\";\n\nimport passport from \"passport\";\nimport { resetPasswordSuccessEmailParameters } from \"./emails/resetPasswordSuccess\";\nimport { changePasswordSuccessEmailParameters } from \"./emails/changePasswordSuccess\";\nimport { hashPassword } from \"./utils\";\n/**\n * Generic authentication method\n *\n * For local authentication with password and email, see passwordAuth\n * @param method\n * @param req\n * @param res\n * @returns\n */\nexport const authenticate = (method, req, res): Promise<any> =>\n  new Promise((resolve, reject) => {\n    passport.authenticate(method, { session: false }, (error, token) => {\n      if (error) {\n        reject(error);\n      } else if (token) {\n        resolve(token);\n      } else {\n        // This occurs when the request has an incorrect body, eg you are using \"username\" instead of \"emails\"\n        reject(new Error(\"Unexpected error during authentication\"));\n      }\n    })(req, res);\n  });\n\n// Uncomment only if using Meteor, using bcrypt native module\n// leads to all sort of issue eg breaking seed scripts, avoid if possible\n//import bcrypt from \"bcrypt\";\n/**\n * Check that the provided password is the user's password\n * @param user\n * @param passwordToTest\n * @returns\n */\nexport const checkPasswordForUser = (\n  user: Pick<UserTypeServer, \"hash\" | \"salt\">,\n  passwordToTest: string\n): boolean => {\n  /**\n   * LEGACY HANDLING FOR METEOR DB\n   */\n  if (!(user.salt && user.hash)) {\n    console.warn(\n      `User ${\n        user && JSON.stringify(user)\n      } has no salt/hash. Coming from Meteor? Will try to use legacy Meteor password, until the user changes their password.`\n    );\n    const storedHashedPassword = (user as any)?.services?.password?.bcrypt;\n    if (!storedHashedPassword)\n      throw new Error(\"User has no Meteor password either.\");\n    /*\n      @see https://willvincent.com/2018/08/09/replicating-meteors-password-hashing-implementation/\n      It doesn't work, probably because the hashing alg may change (Meteor seems to use sha256)\n    const split = storedHashedPassword.split(\"$\");\n    if (split.length < 3) throw new Error(`Password string not valid.`);\n    const hashedPassword = split[3];\n    user.salt = hashedPassword.slice(0, 22);\n    user.hash = hashedPassword.slice(22);\n    */\n    //Â @ts-ignore\n    const userInput = new crypto.Hash(\"sha256\")\n      .update(passwordToTest)\n      .digest(\"hex\");\n    throw new Error(\"Bcrypt not enabled in this app\");\n    //return bcrypt.compareSync(userInput, storedHashedPassword);\n  }\n  const hash = (crypto as any)\n    .pbkdf2Sync(passwordToTest, user.salt, 1000, 64, \"sha512\")\n    .toString(\"hex\");\n  const passwordsMatch = user.hash === hash;\n  return passwordsMatch;\n};\n/**\n * Find an user during authentication\n * Return null if not found/password mismatch\n * @param param0\n */\nexport async function findUserByCredentials({\n  email,\n  password,\n}: {\n  email: string;\n  password: string;\n}): Promise<UserTypeServer | null> {\n  // Here you should lookup for the user in your DB and compare the password:\n  //\n  const user = await UserConnector.findOne({ email });\n  // NOTE: we should NEVER differentiate the return type depending on whether the email is found or the password is mismatching\n  // otherwise attacker could guess whether an user has an account or not in the application\n  if (!user) {\n    return null;\n  }\n  // const user = await DB.findUser(...)\n  const passwordsMatch = checkPasswordForUser(user, password);\n  if (!passwordsMatch) {\n    return null;\n  }\n  return user;\n}\n\nconst logMail = (res) => {\n  console.info(\n    \"Sent an email\",\n    JSON.stringify(res?.envelope, null, 2),\n    (res as any)?.message?.toString()\n  );\n};\n\nexport const sendResetPasswordEmail = async ({ email, resetUrl }) => {\n  const res = await localMailTransport.sendMail({\n    from: process.env.MAIL_FROM,\n    to: email,\n    ...resetPasswordTokenEmailParameters({ resetUrl }),\n  });\n  logMail(res);\n};\n\nexport const sendVerificationEmail = async ({ email, verificationUrl }) => {\n  const res = await localMailTransport.sendMail({\n    from: process.env.MAIL_FROM,\n    to: email,\n    ...verifyEmailEmailParameters({ verificationUrl }),\n  });\n  logMail(res);\n};\n\nexport const sendResetPasswordSuccessEmail = async ({ email }) => {\n  const res = await localMailTransport.sendMail({\n    from: process.env.MAIL_FROM,\n    to: email,\n    ...resetPasswordSuccessEmailParameters(),\n  });\n  logMail(res);\n};\n\nexport const sendChangePasswordSuccessEmail = async ({ email }) => {\n  const res = await localMailTransport.sendMail({\n    from: process.env.MAIL_FROM,\n    to: email,\n    ...changePasswordSuccessEmailParameters(),\n  });\n  logMail(res);\n};\n","import nodemailer from \"nodemailer\";\n\n/**\n * Default transport is the console, for debugging purpose\n * @see https://nodemailer.com/transports/stream/\n */\nlet transport: any = {\n  streamTransport: true,\n  newline: \"unix\",\n  buffer: true,\n  debug: true,\n};\nif (process.env.SMTP_HOST) {\n  transport = {\n    host: process.env.SMTP_HOST,\n    port: process.env.SMTP_PORT,\n    secure: !!process.env.SMTP_SECURE, // true for 465, false for other ports\n  };\n} else {\n  console.warn(\"SMTP Transport not set during development\");\n  console.warn(\n    \"If you run auth test using Cypress, use 'yarn run dev:test' instead!\"\n  );\n}\n\nexport const localMailTransport = nodemailer.createTransport(transport);\n","/**\n * Email will be rendered using React Dom server rendering (renderToStaticMarkup())\n *\n * @see https://reactjs.org/docs/react-dom-server.html\n */\nimport ReactDOMServer from \"react-dom/server.js\";\n\nimport { Typography } from \"@mui/material\";\nimport Mail from \"nodemailer/lib/mailer\";\n\n// exported only for Storybook, don't use directly this component within your app\nexport const ResetPasswordTokenEmail = ({ resetUrl }) => (\n  <div>\n    <Typography variant=\"h1\">Reset your password</Typography>\n    <Typography>\n      Click on this link to access the password reset interface: {resetUrl}\n    </Typography>\n    <Typography>\n      You didn't ask for a password reset? Please reach out our Technical Teams.\n    </Typography>\n  </div>\n);\n\nexport const resetPasswordTokenEmailParameters = ({\n  resetUrl,\n}): Partial<Mail.Options> => ({\n  subject: \"Here is your password reset link\",\n  text: `Click on this link to access the password reset interface: ${resetUrl}. You didn't ask for a password reset? Please reach out our Technical Teams.`,\n  html: ReactDOMServer.renderToStaticMarkup(\n    <ResetPasswordTokenEmail resetUrl={resetUrl} />\n  ),\n});\n","/**\n * Email will be rendered using React Dom server rendering (renderToStaticMarkup())\n *\n * @see https://reactjs.org/docs/react-dom-server.html\n */\nimport ReactDOMServer from \"react-dom/server.js\";\n\nimport { Typography } from \"@mui/material\";\nimport Mail from \"nodemailer/lib/mailer\";\n\n// exported only for Storybook, don't use directly this component within your app\n// If you update this component, don't forget to also update the text version below\nexport const VerifyEmailEmail = ({ verificationUrl }) => (\n  <div>\n    <Typography variant=\"h1\">Email verification</Typography>\n    <Typography>\n      Click on this link to confirm that you own this email address:\n      {verificationUrl}\n    </Typography>\n    <Typography>\n      You didn't sign up to our service? Please reach out our Technical Teams.\n    </Typography>\n  </div>\n);\n\nexport const verifyEmailEmailParameters = ({\n  verificationUrl,\n}): Partial<Mail.Options> => ({\n  subject: \"Email verification\",\n  text: `\n    Click on this link to confirm that you own this email address:\n    ${verificationUrl}. You didn't sign up to our service? Please reach out our Technical Teams.`,\n  html: ReactDOMServer.renderToStaticMarkup(\n    <VerifyEmailEmail verificationUrl={verificationUrl} />\n  ),\n});\n","/**\n * Email will be rendered using React Dom server rendering (renderToStaticMarkup())\n *\n * @see https://reactjs.org/docs/react-dom-server.html\n */\nimport ReactDOMServer from \"react-dom/server.js\";\n\nimport { Typography } from \"@mui/material\";\nimport Mail from \"nodemailer/lib/mailer\";\n\n// exported only for Storybook, don't use directly this component within your app, use the function below\nexport const ResetPasswordSuccessEmail = () => (\n  <div>\n    <Typography variant=\"h1\">Reset password success</Typography>\n    <Typography>Your password has been reset successfully.</Typography>\n    <Typography>\n      You didn't ask for a password reset? Please reach out our Technical Teams.\n    </Typography>\n  </div>\n);\n\nexport const resetPasswordSuccessEmailParameters =\n  (): Partial<Mail.Options> => ({\n    subject: \"Password successfully reset\",\n    text: `Everything went fine. You didn't ask for a password reset? Please reach out our Technical Teams.`,\n    html: ReactDOMServer.renderToStaticMarkup(<ResetPasswordSuccessEmail />),\n  });\n","/**\n * Email will be rendered using React Dom server rendering (renderToStaticMarkup())\n *\n * @see https://reactjs.org/docs/react-dom-server.html\n */\nimport ReactDOMServer from \"react-dom/server.js\";\n\nimport { Typography } from \"@mui/material\";\nimport Mail from \"nodemailer/lib/mailer\";\n\n// exported only for Storybook, don't use directly this component within your app, use the function below\nexport const ChangePasswordSuccessEmail = () => (\n  <div>\n    <Typography variant=\"h1\">Password changed</Typography>\n    <Typography>Your password has been changed successfully.</Typography>\n    <Typography>\n      You didn't ask for a password change? Please reach out our Technical\n      Teams.\n    </Typography>\n  </div>\n);\n\nexport const changePasswordSuccessEmailParameters =\n  (): Partial<Mail.Options> => ({\n    subject: \"Here is your password reset link\",\n    text: `Your password has been changed successfully. You didn't ask for a password change? Please reach out our Technical Teams.`,\n    html: ReactDOMServer.renderToStaticMarkup(<ChangePasswordSuccessEmail />),\n  });\n","import { serialize, parse } from \"cookie\";\n\nexport const TOKEN_NAME = \"token\";\nconst MAX_AGE = 60 * 60 * 8; // 8 hours\n\nexport function setTokenCookie(res, token) {\n  const cookie = serialize(TOKEN_NAME, token, {\n    maxAge: MAX_AGE,\n    expires: new Date(Date.now() + MAX_AGE * 1000),\n    httpOnly: true,\n    secure: process.env.NODE_ENV === \"production\",\n    path: \"/\",\n    sameSite: \"lax\",\n  });\n\n  res.setHeader(\"Set-Cookie\", cookie);\n}\n\nexport function removeTokenCookie(res) {\n  const cookie = serialize(TOKEN_NAME, \"\", {\n    maxAge: -1,\n    path: \"/\",\n  });\n\n  res.setHeader(\"Set-Cookie\", cookie);\n}\n\nexport function parseCookies(req) {\n  // For API Routes we don't need to parse the cookies.\n  if (req.cookies) return req.cookies;\n\n  // For pages we do need to parse the cookies.\n  const cookie = req.headers?.cookie;\n  return parse(cookie || \"\");\n}\n\nexport function getTokenCookie(req) {\n  const cookies = parseCookies(req);\n  return cookies[TOKEN_NAME];\n}\n","import Local from \"passport-local\";\nimport { debugMongo } from \"~/lib/debuggers\";\nimport { findUserByCredentials } from \"../accountManagement\";\nimport { connectToAppDb } from \"../../mongoose/connection\";\n\n/**\n * Passport strategy for local password based authentication\n * @see http://www.passportjs.org/docs/username-password/\n * @see http://www.passportjs.org/packages/passport-local/\n */\nexport const localStrategy = new Local.Strategy(\n  {\n    usernameField: \"email\", // name of the field you'll have to provide when calling \"authenticate\"/\"login\". The default is \"username\".\n    passwordField: \"password\",\n  },\n  function (email, password, done) {\n    // TODO: logic a bit duplicated with MongoConnection handler + not tested\n    connectToAppDb()\n      .then(() => {\n        debugMongo(\"Connected to db from passport local auth strategy\");\n        findUserByCredentials({ email, password })\n          .then((user) => {\n            if (!user) {\n              done(new Error(\"Email/password not matching\"));\n            } else if (!(user.isAdmin || user.isVerified)) {\n              done(\n                new Error(\n                  \"Account not verified. Please open the verification link we have sent you when you signed up.\"\n                )\n              );\n            } else {\n              done(null, user);\n            }\n          })\n          .catch((error) => {\n            done(error);\n          });\n      })\n      .catch((err) => {\n        debugMongo(\n          \"Could not connect to db from passport local auth strategy\",\n          err\n        );\n        done(err);\n      });\n  }\n);\n","// For the token\n// https://hapi.dev/module/iron/\nimport Iron from \"@hapi/iron\";\nimport { Request } from \"express\";\nimport { NextApiRequest } from \"next\";\nimport { UserType } from \"~/models/user\";\nimport { getTokenCookie } from \"./auth-cookies\";\n\n// Use an environment variable here instead of a hardcoded value for production\nconst TOKEN_SECRET = process.env.TOKEN_SECRET;\nif (!TOKEN_SECRET)\n  throw new Error(\"Authentication not set for this application\");\n\nexport function encryptSession(session: UserType) {\n  return Iron.seal(session, TOKEN_SECRET!, Iron.defaults);\n}\n\n/**\n * Returns the user data from the token\n * => it let's the backend check for user existence in the database\n * @param req\n */\nexport async function getSession(\n  req: NextApiRequest | Request\n): Promise<UserType> {\n  const token = getTokenCookie(req);\n  return token && Iron.unseal(token, TOKEN_SECRET!, Iron.defaults);\n}\n\nexport async function decryptToken(token: string) {\n  return Iron.unseal(token, TOKEN_SECRET!, Iron.defaults);\n}\n","import crypto from \"crypto\";\nexport const hashPassword = (password: string) => {\n  const salt = (crypto as any).randomBytes(16).toString(\"hex\");\n  const hash = (crypto as any)\n    .pbkdf2Sync(password, salt, 1000, 64, \"sha512\")\n    .toString(\"hex\");\n  return { salt, hash };\n};\n","/**\n * Context creation, for graphql but also REST endpoints\n *\n * Use vulcan helper for the default context\n * + add user related context\n */\nimport { UserConnector, UserType } from \"~/models/user.server\";\nimport { NextApiRequest } from \"next\";\nimport { getSession } from \"~/lib/api/account\";\nimport { Request } from \"express\";\nimport debug from \"debug\";\nimport models from \"~/models/index.server\";\nconst debugGraphqlContext = debug(\"vn:graphql:context\");\n\nimport { createContext as createVulcanDefaultContext } from \"@vulcanjs/graphql/server\";\n\nconst createContextForModels = createVulcanDefaultContext(models);\n\n// TODO: isolate context creation code like we do in Vulcan + initialize the currentUser too\nexport const createContextBase = async () => ({\n  ...(await createContextForModels(null)),\n  // add some custom context here if needed\n});\n\ninterface UserContext {\n  userId?: string;\n  currentUser?: UserType;\n}\nconst userContextFromReq = async (\n  req: Request | NextApiRequest\n): Promise<UserContext> => {\n  const session = await getSession(req);\n  if (!session?._id) return {};\n  // Refetch the user from db in order to get the freshest data\n  const user = await UserConnector.findOneById(session._id);\n  if (user) {\n    return { userId: user._id, currentUser: user };\n  }\n  return {};\n};\nexport const contextFromReq = async (req: Request) => {\n  // TODO\n  const userContext = await userContextFromReq(req);\n  const context = {\n    ...contextBase,\n    ...userContext,\n    // pass down the request to graphql context, to allow advanced usage\n    req,\n  };\n  debugGraphqlContext(\"Graphql context for current request:\", context);\n  return context;\n};\n","/**\n * I am a sample model\n * Replace me with your own\n */\nimport {\n  CreateGraphqlModelOptionsServer,\n  createGraphqlModelServer,\n  VulcanGraphqlSchemaServer,\n} from \"@vulcanjs/graphql/server\";\nimport { createMongooseConnector } from \"@vulcanjs/mongo\";\nimport merge from \"lodash/merge.js\";\nimport {\n  modelDef as commonModelDef,\n  SampleModelType,\n  schema as commonSchema,\n} from \"./sampleModel\";\nimport { User, UserConnector } from \"./user.server\";\n\nconst schema: VulcanGraphqlSchemaServer = merge({}, commonSchema, {\n  // An API-only field, that will appear in the graphql schema\n  // but not used in the browser\n  demoServerOnlyField: {\n    type: String,\n    optional: true,\n    canRead: [\"guests\"],\n    canUpdate: [\"admins\"],\n    canCreate: [\"owners\"],\n    searchable: true,\n  },\n  /**\n   * Demo of an avanced field resolver\n   *\n   *\n   * Use only as a last resort for advanced use case,\n   * prefer relations for more basic use cases\n   *\n   * NOTE: a field resolver is tied to a specific document,\n   * it is used to enhance each document of your collection,\n   * for instance getting Twitter account info of your user based on their id.\n   *\n   * If you want to define a new \"static\", \"top-level\" query/mutation,\n   * => just add it in src/pages/api/graphql using usual Apollo syntax\n   *\n   *\n   * @example\n   * query withResolved { sample(input:{}) { result {\n   *   someId\n   *   resolvedField(someArgument: \"hello\", anotherArgument: 42)\n   * }}}\n   */\n  demoCustomResolverField: {\n    type: String,\n    optional: true,\n    canRead: [\"admins\"],\n    resolveAs: {\n      // fieldName can be the same as the initial type (useful for \"virtual\" fields that do not exist in the database at all)\n      fieldName: \"demoResolvedField\",\n      // Return type of your field\n      typeName: \"String\",\n      // Will keep \"someId\" in the graphql schema\n      addOriginalField: true,\n      arguments: \"someArgument: String, anotherArgument: Int\",\n      description: \"A resolved field\",\n      // query withResolved { sample { result { someId(someArgument: \"hello\", anotherArgument: 42) }}}\n      resolver: async (\n        document: SampleModelTypeServer,\n        args: { someArgument: string; anotherArgument: number },\n        context,\n        info\n      ) => {\n        // Here, you can get a value based on \"document.someId\" (or any other field)\n        // \"context\" contains:\n        // - currentUser and userId for authenticated user\n        // - HTTP request\n        // - each model and connector (but you should import them explicitely, this only is used internally by Vulcan)\n        // Permissions are automatically checked for you based on \"canRead\" field\n\n        // Dumb example of how you can use a connector to fetch data from another collection\n        const tenUsers = await UserConnector.find({}, { limit: 10 });\n        const filtered = tenUsers.filter((u) =>\n          u.email?.match(document.demoCustomResolverField)\n        );\n        return `\n        Initial Id is: ${document.demoCustomResolverField}\n        Args are: ${args.someArgument}, ${args.anotherArgument}`;\n      },\n    },\n  },\n} as VulcanGraphqlSchemaServer);\n\nexport interface SampleModelTypeServer extends SampleModelType {\n  demoServerOnlyField: string;\n  demoCustomResolverField: string;\n  demoResolvedField: string;\n}\n\nconst modelDef: CreateGraphqlModelOptionsServer = merge({}, commonModelDef, {\n  schema,\n  // add other server only options here,\n  // like callbacks\n  graphql: {\n    ...commonModelDef.graphql, // NOT: not mandatory but will please TS until we can figure nested partial types\n    // Expert feature: you can customize resolvers for CRUD operations here\n    // mutationResolvers: { },\n    // queryResolvers: {}\n  },\n} as Partial<CreateGraphqlModelOptionsServer>);\nexport const SampleModel = createGraphqlModelServer(modelDef);\n\n/**\n * Defining a connector explicitely let us reuse it when creating custom resolver\n *\n * This is optional, a connector is automatically created for you during graphql context creation\n */\nexport const SampleModelConnector =\n  createMongooseConnector<SampleModelType>(SampleModel);\n// We registrer the connector within the model\n// (Note: since the connector depends on the model, it can not be done during model creation,\n// you have to do this afterward)\nSampleModel.graphql.connector = SampleModelConnector;\n","/**\n * I am a sample model\n * Replace me with your own\n */\nimport { VulcanDocument } from \"@vulcanjs/schema\";\nimport {\n  createGraphqlModel,\n  CreateGraphqlModelOptionsShared,\n  VulcanGraphqlSchema,\n} from \"@vulcanjs/graphql\";\nimport { User } from \"./user\";\n\nexport const schema: VulcanGraphqlSchema = {\n  /** Unique id of the document in the database. You'll want to leave this field as is. */\n  _id: {\n    type: String,\n    optional: true,\n    canRead: [\"guests\"],\n  },\n  /** _id of the user that created the document. This special field is used to handle the \"ownership\" of the document. */\n  userId: {\n    type: String,\n    optional: true,\n    canRead: [\"guests\"],\n  },\n  /** Timestamps handled by the database (you could also define updatedAt) */\n  createdAt: {\n    type: Date,\n    optional: true,\n    canRead: [\"admins\"],\n    onCreate: () => {\n      return new Date();\n    },\n  },\n  // Your own custom fields. Press ctrl+space to see the possible fields.\n  someField: {\n    type: String,\n    optional: true,\n    canRead: [\"guests\"],\n    canUpdate: [\"admins\", \"owners\"],\n    canCreate: [\"members\"],\n  },\n  // If relationDemoUserId matches an existing user, this field can resolve it\n  // NOTE: the match will be done on \"_id\" field of the relation, this is not configurable yet\n  // NOTE 2: since relations are declarative (no server code), you can also define them in the shared schema\n  // this may make data fetching easier in the frontend (the client can know the relation)\n  demoRelationFieldUserId: {\n    type: String,\n    relation: {\n      fieldName: \"resolvedFieldFromRelation\",\n      kind: \"hasOne\",\n      model: User,\n    },\n  },\n};\n\nexport interface SampleModelType extends VulcanDocument {\n  // List your custom fields (_id, userId, createdAt, updatedAt and slug are already in VulcanDocument type)\n  someField: string;\n}\n\nconst name = \"Sample\"; // Change this value when creating your own model\nconst typeName = name;\nconst multiTypeName = \"Samples\"; // Change this value when creating your own model\nexport const modelDef: CreateGraphqlModelOptionsShared = {\n  name,\n  schema,\n  graphql: {\n    typeName,\n    multiTypeName,\n  },\n  permissions: {\n    canCreate: [\"member\"],\n    canUpdate: [\"owners\", \"admins\"],\n    canDelete: [\"owners\", \"admins\"],\n    canRead: [\"members\", \"admins\"],\n  },\n};\nexport const SampleModel = createGraphqlModel(modelDef);\n","// Export all your SERVER-ONLY models here\n// Please do not remove the User model, which is necessary for auth\nimport { SampleModel } from \"./sampleModel.server\";\nimport { User } from \"./user.server\";\nconst models = [User, SampleModel];\n\n// Add default connectors and dataSources creators for models that may miss some\n// @see https://www.apollographql.com/docs/apollo-server/data/data-sources\nimport { addDefaultMongoConnector } from \"@vulcanjs/mongo-apollo\";\naddDefaultMongoConnector(models);\n\nexport default models;\n","import {\n  closeDbConnection,\n  connectToAppDb,\n} from \"~/lib/api/mongoose/connection\";\nimport runSeed from \"~/lib/api/runSeed\";\n\n// No top-level async for Node 14\nasync function run() {\n  await connectToAppDb();\n  await runSeed();\n  await closeDbConnection();\n}\nrun();\n"],"mappings":"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","names":[]}